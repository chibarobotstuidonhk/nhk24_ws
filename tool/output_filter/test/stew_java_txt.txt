0_u32": "std::optional{" デフォルトはAPB1が36MHzのとき、1Mbps"u8sv}
1_u32": "std::optional{" bool no_auto_retransmission{false};  /// @todo 未対応"u8sv}
2_u32": "std::optional{" (no_auto_retransmission ? RegisterMap::MCR::NART : 0) |"u8sv}
3_u32": "std::optional{" u8 fmi;"u8sv}
4_u32": "std::optional{"/ @brief メッセージを送信する。すでに送信バッファが埋まっていたら、新たに追加しようとしたものを含めた中で優先度の最も低いメッセージを破棄する。"u8sv}
5_u32": "std::optional{"/ @attention 送信が成功したかどうかを監視しない。よってNonAutoRetransmissionモードは未対応。"u8sv}
6_u32": "std::optional{"/ @param id "u8sv}
7_u32": "std::optional{"/ @param data "u8sv}
8_u32": "std::optional{"/ @return 破棄が発生したかどうか"u8sv}
9_u32": "std::optional{" 全部埋まっていたなら"u8sv}
10_u32": "std::optional{" もともと入っていたほうの優先順位が高いなら"u8sv}
11_u32": "std::optional{" 今回試みた送信を破棄する"u8sv}
12_u32": "std::optional{" そうでなければ送信をアボートする(か、結果的に送信が終わって空きができる)"u8sv}
13_u32": "std::optional{" 送信バッファに書き込む"u8sv}
14_u32": "std::optional{" ID設定"u8sv}
15_u32": "std::optional{" DLC設定"u8sv}
16_u32": "std::optional{" データ設定"u8sv}
17_u32": "std::optional{" 送信要求"u8sv}
18_u32": "std::optional{" 受信バッファにデータがなければ"u8sv}
19_u32": "std::optional{" 空を返す"u8sv}
20_u32": "std::optional{" 受信バッファからデータを読み出す"u8sv}
21_u32": "std::optional{" CanDataFieldの取得"u8sv}
22_u32": "std::optional{" // FMIの取得"u8sv}
23_u32": "std::optional{" msg.fmi = mailbox.MDTR & RegisterMap::MDTR::FMI >> RegisterMap::MDTR::shiftFMI;"u8sv}
24_u32": "std::optional{" 受信時刻の取得"u8sv}
25_u32": "std::optional{" IDの取得"u8sv}
26_u32": "std::optional{" 受信をリリース"u8sv}
27_u32": "std::optional{"/ @brief 送信をアボートする"u8sv}
28_u32": "std::optional{"/ @param code mailbox code"u8sv}
29_u32": "std::optional{"/ @return Whether the transmission was successful: true if successful, false if aborted"u8sv}
